name: PowerShell Composite Action CI

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - "**/powershell/functions/**/*.ps1"
      - "**/powershell/tests/*.ps1"
      - ".github/workflows/ci.yml"
      - "action.yml"
  pull_request:
    branches: [main]
    paths:
      - "**/powershell/functions/**/*.ps1"
      - "**/powershell/tests/*.ps1"
      - ".github/workflows/ci.yml"
      - "action.yml"

permissions:
  id-token: write
  contents: read

jobs:
  CI:
    runs-on: ubuntu-latest
    environment: actions-testing

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Pester test main powershell function
        run: |
          # Test main function
          $mainFunction = Get-ChildItem -Path "${{ github.workspace }}/powershell/functions/main" -filter "*.ps1"
          $mainFunctionBaseName = $mainFunction.BaseName
          $pesterTestFullName = "${{ github.workspace }}/powershell/tests/$mainFunctionBaseName.Tests.ps1"

          Invoke-Pester -Path $pesterTestFullName -Output Detailed

        shell: pwsh

      - name: Authenticate to azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.CLIENT_ID}}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Generate name for temp azure container registry
        id: generate-acr-name
        run: |
          # Generate acr name
          $random6Digits = -join (('0123456789abcdefghijklmnopqrstuvwxyz').ToCharArray() | Get-Random -Count 6)
          $acrName = "deploypsmodulestoacr$random6Digits"
          Write-Output "acrname=$acrName" >> $Env:GITHUB_OUTPUT

        shell: pwsh

      - name: Create temp azure container registry
        id: create-temp-acr
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            # Create and register temp azure container registry

            # Set output to none to suppress unnecessary CLI output
            export AZURE_CORE_OUTPUT=none

            resourceGroupName='${{ secrets.RESOURCE_GROUP_NAME }}'
            location='${{ secrets.LOCATION }}'
            $acrName = '${{ steps.generate-acr-name.outputs.acrname }}'

            # Clear out any existing temporary ACRs
            az acr list --resource-group "$resourceGroupName" --query "[].name" -o tsv | while read acrName
            do
              echo "Deleting $acrName"
              az acr delete --name "$acrName" --resource-group "$resourceGroupName" --yes
            done

            echo "Creating ACR named $acrName"
            az acr create --resource-group "$resourceGroupName" --name "$acrName" --sku Basic --location "$location"
            loginServer=$(az acr show --name "$acrName" --resource-group "$resourceGroupName" --query loginServer --output tsv)

            # Output the ACR name and login server for use in subsequent steps

            echo "loginserver=$loginServer" >> $GITHUB_OUTPUT

      - name: Run action.yml
        uses: ./
        with:
          acrname: '${{ steps.generate-acr-name.outputs.acrname }}'
          module-source-path: '${{ github.workspace }}/powershell/tests/test-modules'
          resource-group-name: '${{ secrets.RESOURCE_GROUP_NAME }}'

      - name: Confirm action.yml performed required tasks
        run: |
          # Confirm modules are present in ACR

          $acrName = '${{ steps.generate-acr-name.outputs.acrname }}'

          # Dot source in all the functions in this action repo
          $functions = Get-ChildItem -Path '${{ github.workspace }}/powershell/functions' -Recurse -Filter "*.ps1"
          $functions | ForEach-Object {
            . $_.FullName
          }

          # Get the valid modules configured in this repo
          $validModules = Get-ValidModules -moduleSourcePath '${{ github.workspace }}/powershell/tests/test-modules'

          # Confirm the modules were uploaded to the ACR using the PSResourceRepository pointing to the temp ACR
          foreach($validModule in $validModules) {
            $moduleName = $validModule.Name
            $moduleVersion = $validModule.Version
            try {
              Find-PSResource -Name $moduleName -Version $moduleVersion -Repository $acrName
            }
            catch {
              throw "$moduleName was not found in the ACR repo - $_"
            }
          }

        shell: pwsh

      - name: Remove temp ACR
        if: always()
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            # Remove temp ACR
            az acr list --resource-group "$resourceGroupName" --query "[].name" -o tsv | while read acrName
            do
              echo "Deleting $acrName"
              az acr delete --name "$acrName" --resource-group "$resourceGroupName" --yes
            done




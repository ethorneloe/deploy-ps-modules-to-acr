name: "deploy-ps-modules-to-acr"

description: "Discovers the powershell modules within your GitHub repo and deploys them to a Azure Container Registry using the version set in the .psd1 files"

inputs:
  acr-name:
    description: "The name of your Azure Container Registry"
    required: true
  resource-group-name:
    description: "Path within your git repo containing your powershell module folder(s)"
    required: true
  module-source-path:
    description: "Path within your git repo containing your powershell module folder(s)"
    required: false
    default: ${{ github.workspace }}

runs:
  using: "composite"
  steps:
    - name: Install preview PSResourceGet module
      run: |
        # Install preview PSResourceGet module for acr support

        $previewVersion = Get-InstalledPSResource -Name 'Microsoft.PowerShell.PSResourceGet' -ErrorAction SilentlyContinue | Where-Object { $_.Prerelease -eq 'preview1' -and $_.Version.toString() -eq '1.1.0' }
        if ( !($previewVersion)) {
            Write-Host "Installing Microsoft.PowerShell.PSResourceGet v1.1.0 preview1"

            $installPSResourceSplat = @{
                Repository = 'PSGallery'
                Name       = 'Microsoft.PowerShell.PSResourceGet'
                Version    = '1.1.0-preview1'
            }
            Install-PSResource @installPSResourceSplat
        }

      shell: pwsh

    - name: Upload Modules to acr
      run: |
        # Upload modules to acr

        $acrName = '${{ inputs.acr-name }}'
        $moduleSourcePath = '${{ inputs.module-source-path }}'
        $resourceGroupName = '${{ inputs.resource-group-name }}'
        $acrLoginServer = az acr show --name $acrName --resource-group $resourceGroupName --query loginServer --output tsv

        # Configure function params
        $params = @{
            acrName= $acrName
            acrLoginServer = $acrLoginServer
            moduleSourcePath = $moduleSourcePath
            resourceGroupName = $resourceGroupName
        }

        # Dot source in all the functions in this action repo
        $functions = Get-ChildItem -Path '${{ github.action_path }}/powershell/functions' -Recurse -Filter "*.ps1"
        $functions | ForEach-Object {
          . $_.FullName
        }

        # Extract the main function and execute
        $mainFunction = Get-ChildItem -Path '${{ github.action_path }}/powershell/functions/main' -Filter "*.ps1"
        $mainFunctionBaseName = $mainFunction | Select-Object -ExpandProperty BaseName
        $output = & $mainFunctionBaseName @params -InformationAction Continue
        $output | ConvertTo-Json

      shell: pwsh

branding:
  icon: "arrow-up-circle"
  color: "blue"
